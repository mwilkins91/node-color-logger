{"version":3,"sources":["../index.js"],"names":[],"mappings":";;;;;;AAAA,IAAM,WAAW;AACf,SAAO,UADQ;AAEf,OAAK,UAFU;AAGf,SAAO,UAHQ;AAIf,UAAQ,UAJO;AAKf,QAAM,UALS;AAMf,WAAS,UANM;AAOf,QAAM,UAPS;AAQf,SAAO,UARQ;AASf,SAAO;AATQ,CAAjB;AAWA,IAAM,QAAQ,SAAS,KAAvB;;IAEM,M;AACJ,kBAAY,KAAZ,EAAwC;AAAA,QAArB,KAAqB,uEAAb,QAAQ,GAAK;;AAAA;;AACtC,SAAK,KAAL,GAAa,OAAO,eAAP,CAAuB,KAAvB,CAAb;AACA,SAAK,KAAL,GAAa,KAAb;AACD;;;;wBAWG,I,EAAM;AACR,WAAK,KAAL,CAAW,KAAK,KAAhB,EAAuB,IAAvB,EAA6B,KAA7B;AACA,aAAO,IAAP;AACD;;;2BACuB;AAAA,UAAnB,aAAmB,uEAAH,CAAG;;AACtB,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,aAApB,EAAmC,GAAnC,EAAwC;AACtC,aAAK,KAAL,CAAW,KAAK,KAAhB,EAAuB,YAAvB,EAAqC,KAArC;AACD;AACD,aAAO,IAAP;AACD;;;kCACa,Q,EAAU;AACtB,WAAK,KAAL,GAAa,OAAO,eAAP,CAAuB,QAAvB,CAAb;AACA,aAAO,IAAP;AACD;;;oCAvBsB,K,EAAO;AAC5B,UAAM,kBAAkB,MAAM,IAAN,GAAa,WAAb,EAAxB;AACA,UAAI,CAAC,SAAS,eAAT,CAAL,EAAgC;AAC9B,cAAM,IAAI,KAAJ,CACJ,wDACE,OAAO,IAAP,CAAY,QAAZ,EAAsB,IAAtB,CAA2B,IAA3B,CAFE,CAAN;AAID;AACD,aAAO,SAAS,eAAT,CAAP;AACD;;;0BAeY,M,EAAO;AAClB,UAAM,eAAe,OAAO,eAAP,CAAuB,MAAvB,CAArB;AACA,aAAO,IAAI,MAAJ,CAAW,MAAX,CAAP;AACD;;;;;;AAGH,OAAO,OAAP,GAAiB,MAAjB","file":"index.js","sourcesContent":["const colorMap = {\n  black: '\\x1b[30m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m',\n  white: '\\x1b[37m',\n  reset: '\\x1b[0m',\n};\nconst reset = colorMap.reset;\n\nclass Logger {\n  constructor(color, logTo = console.log) {\n    this.color = Logger.getConsoleColor(color);\n    this.logTo = logTo;\n  }\n  static getConsoleColor(color) {\n    const normalizedColor = color.trim().toLowerCase();\n    if (!colorMap[normalizedColor]) {\n      throw new Error(\n        'That is not a recognized color. Please use one of: ' +\n          Object.keys(colorMap).join(', ')\n      );\n    }\n    return colorMap[normalizedColor];\n  }\n  log(text) {\n    this.logTo(this.color, text, reset);\n    return this;\n  }\n  line(numberOfLines = 1) {\n    for (let i = 0; i < numberOfLines; i++) {\n      this.logTo(this.color, '----------', reset);\n    }\n    return this;\n  }\n  changeColorTo(newColor) {\n    this.color = Logger.getConsoleColor(newColor);\n    return this;\n  }\n  static color(color) {\n    const encodedColor = Logger.getConsoleColor(color);\n    return new Logger(color);\n  }\n}\n\nmodule.exports = Logger;\n"]}